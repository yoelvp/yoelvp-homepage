---
interface Props {
  hasMenu?: boolean
}

const { hasMenu } = Astro.props
const { pathname } = Astro.url
const normalizedPathName =
  pathname.length > 1 && pathname.endsWith("/") ? pathname.slice(0, -1) : pathname
const pages = [
  {
    href: '/',
    label: 'Inicio',
    isActive: pathname === '/'
  },
  {
    href: '/projects',
    label: 'Proyectos',
    isActive: normalizedPathName.startsWith("/projects")
  },
  {
    href: '/about',
    label: 'Acerca',
    isActive: normalizedPathName.startsWith("/about")
  },
  {
    href: '/posts',
    label: 'Posts',
    isActive: normalizedPathName.startsWith("/posts")
  }
]
const AUTHOR_NAME = Array.from('Yoel Valverde')
---

<header data-has-menu={hasMenu ? 'Yes' : 'No'}>
  <div
    id="header"
    class='fixed top-4 right-4 z-[500] transition-[transform] duration-500'
    class:list={[
      { 'hidden': !hasMenu }
    ]}
  >
    <nav class="menu-wrapper flex flex-col justify-center items-center">
      {pages.map(page => (
        <a
          href={page.href}
          class:list={[
            'py-1 px-4 uppercase',
            {
              'active-link': page.isActive,
              'hover:text-primary': !page.isActive
            }
          ]}
        >
          {page.label}
        </a>
      ))}
    </nav>
  </div>

  <nav
    id="authorName"
    class="hidden fixed top-4 left-0 transition-[transform] duration-300 z-50 md:inline-block md:left-1 lg:left-4"
    class:list={[
      { 'scale-0': hasMenu }
    ]}
  >
    <a href="/" class="flex flex-col justify-center items-center">
      {AUTHOR_NAME.map(char => (
        <span class="uppercase font-gothania-serif md:text-3xl lg:text-4 xl:text-5xl 2xl:text-6xl">
          {char === ' ' ? '\u00a0' : char}
        </span>
      ))}
    </a>
  </nav>

  <button
    id='menu'
    class:list={[
      'menu-button fixed w-12 h-12 p-2 bg-primary rounded-full top-4 right-1 transition-[transform] duration-500 z-[1000]',
      'flex flex-col justify-center items-center gap-2',
      'md:right-2 lg:right-4',
      { 'scale-0': hasMenu }
    ]}
  >
    <span></span>
    <span></span>
  </button>
</header>

<style>
.active-link {
  color: var(--primary);
}

.menu-wrapper {
  transition: filter 300ms;
}

.menu-wrapper a {
  transition: color 300ms;
}

.menu-wrapper:hover a {
  filter: blur(2px);
}

.menu-wrapper:hover a.active-link {
  color: var(--white);
}

.menu-wrapper a:hover {
  filter: none;
}

.menu-button span {
  display: inline-block;
  height: 2px;
  width: 100%;
  background-color: white;
}
</style>

<script>
  import { $ } from '@/lib/dom-selector.ts'

  const $header = $('#header')
  const $masthead = $('#masthead')
  const $menu = $('#menu')
  const $authorName = $('#authorName')
  const headerElement = $('[data-has-menu]')
  const mastheadHeight = $masthead?.offsetHeight ?? 0
  const SCROLL_POSITION_TO_HIDDEN_HEADER = 512

  const hasMenu = headerElement?.dataset.hasMenu

  $menu?.addEventListener('click', () => {
    console.log('Click')
  })

  function handleScroll() {
    const scrollPosition = window.scrollY

    if (hasMenu === 'Yes') {
      if (scrollPosition >= mastheadHeight) {
        $authorName?.classList.remove('scale-0')
      }

      if (scrollPosition <= mastheadHeight - 128) {
        $header?.classList.add('scale-0')
      }

      if (scrollPosition >= mastheadHeight + 128) {
        $menu?.classList.remove('scale-0')
      }

      if (scrollPosition <= mastheadHeight) {
        $menu?.classList.add('scale-0')
        $authorName?.classList.add('scale-0')
      }

      if (scrollPosition <= SCROLL_POSITION_TO_HIDDEN_HEADER) {
        $header?.classList.remove('scale-0')
      }
    }
  }

  window.addEventListener('scroll', handleScroll)
  window.addEventListener('beforeunload', () => {
    window.removeEventListener('scroll', handleScroll)
  })
</script>
