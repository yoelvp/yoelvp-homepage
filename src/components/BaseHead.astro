
---
import { ViewTransitions } from 'astro:transitions'
import '@/styles/styles.css'

interface Props {
  title: string
  description: string
}

const { title, description } = Astro.props
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/png+xml+ico" href="/favicon.png" />

<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content="Yoel Valverde <yoelvp73@gmail.com>" />
<meta name="keywords" content="fullstack developer, frontend developer, backend developer, react developer, web developer, desarrollador web, programador" />
<meta name="generator" content={Astro.generator} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />

<!-- Fonts -->
<!-- <link rel="preload" href="/fonts/WorkSans-ExtraLight.woff2" as="font" type="font/woff2" crossorigin="anonymous" /> -->
<!-- <link rel="preload" href="/fonts/WorkSans-Light.woff2" as="font" type="font/woff2" crossorigin="anonymous" /> -->
<link rel="preload" href="/fonts/WorkSans-Regular.woff2" as="font" type="font/woff2" crossorigin="anonymous" />
<!-- <link rel="preload" href="/fonts/WorkSans-Medium.woff2" as="font" type="font/woff2" crossorigin="anonymous" /> -->
<!-- <link rel="preload" href="/fonts/WorkSans-Bold.woff2" as="font" type="font/woff2" crossorigin="anonymous" /> -->
<link rel="preload" href="/fonts/BebasNeue-Regular.woff2" as="font" type="font/woff2" crossorigin="anonymous" />
<link rel="stylesheet" href="/styles/fonts.css">

<ViewTransitions />

<style is:global>
.markdown-body {
  ul {
    @apply mb-4 list-inside list-disc pl-4;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-weight: bold;
    margin-bottom: 0.25rem;
  }

  h1 {
    @apply text-4xl;
  }

  h2 {
    @apply text-2xl;
  }

  h3 {
    @apply text-xl;
  }

  h4 {
    @apply text-lg;
  }

  li {
    list-style: disc;
    list-style-position: inside;
  }

  hr {
    margin: 1.5rem 0;
    border: none;
    height: 1px;
    width: 100%;
    background-color: var(--zinc-600);
  }

  img {
    width: 100%;
    border-radius: var(--rounded);
    border: 1px solid var(--zinc-600);
  }

  p {
    margin-bottom: 0.875rem;
    line-height: 1.3rem;
  }

  a {
    text-decoration: underline;
    text-decoration-color: var(--primary);
    text-underline-offset: 4px;
  }

  a:hover {
    color: var(--primary);
  }

  ul {
    padding-left: 0.5rem;
  }
}
</style>

<script>
// Cursor style
const cursorEl: HTMLElement = document.querySelector('#cursor')!
const target = { x: 0.5, y: 0.5 }
const cursor = { x: 0.5, y: 0.5 }
let raf: number | undefined

const lerp = (a: number, b: number, speed: number) => {
  return (1 - speed) * a + speed * b
}

const update = () => {
  cursor.x = lerp(cursor.x, target.x, 0.1)
  cursor.y = lerp(cursor.y, target.y, 0.1)
  cursorEl?.style.setProperty('--x', `${cursor.x}`)
  cursorEl?.style.setProperty('--y', `${cursor.y}`)

  const delta = Math.sqrt(Math.pow(target.x - cursor.x, 2) + Math.pow(target.y - cursor.y, 2))

  if (delta < 0.001) {
    raf && cancelAnimationFrame(raf)
    raf = undefined
    return
  }

  raf = requestAnimationFrame(update)
}

const handleMouseMove = (event: any) => {
  target.x = event.clientX / window.innerWidth
  target.y = event.clientY / window.innerHeight

  if (!raf) raf = requestAnimationFrame(update)
}

window.addEventListener('mousemove', handleMouseMove)
raf = requestAnimationFrame(update)
window.removeEventListener('beforeunload', handleMouseMove)
</script>
