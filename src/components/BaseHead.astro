
---
import { ClientRouter } from "astro:transitions";
import "@/styles/global.css";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content="Yoel Valverde <yoelvp73@gmail.com>" />
<meta name="keywords" content="fullstack developer, frontend developer, backend developer, astro, desarrollado astro, peru, react developer, web developer, desarrollador web, programador" />
<meta name="generator" content={Astro.generator} />

<meta name="robots" content="index, follow" />
<meta name="googlebot" content="index, follow" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />

<!-- Fonts -->
<link rel="preload" href="/fonts/Quicksand-Regular.woff2" as="font" type="font/woff2" crossorigin="anonymous" />
<link rel="preload" href="/fonts/BebasNeue-Regular.woff2" as="font" type="font/woff2" crossorigin="anonymous" />

<ClientRouter />

<script>
const cursorEl: HTMLElement = document.querySelector('#cursor')!
const target = { x: 0.5, y: 0.5 }
const cursor = { x: 0.5, y: 0.5 }
let raf: number | undefined

const lerp = (a: number, b: number, speed: number) => {
  return (1 - speed) * a + speed * b
}

const update = () => {
  cursor.x = lerp(cursor.x, target.x, 0.1)
  cursor.y = lerp(cursor.y, target.y, 0.1)
  cursorEl?.style.setProperty('--x', `${cursor.x}`)
  cursorEl?.style.setProperty('--y', `${cursor.y}`)

  const delta = Math.sqrt(Math.pow(target.x - cursor.x, 2) + Math.pow(target.y - cursor.y, 2))

  if (delta < 0.001) {
    raf && cancelAnimationFrame(raf)
    raf = undefined
    return
  }

  raf = requestAnimationFrame(update)
}

const handleMouseMove = (event: any) => {
  target.x = event.clientX / window.innerWidth
  target.y = event.clientY / window.innerHeight

  if (!raf) raf = requestAnimationFrame(update)
}

window.addEventListener('mousemove', handleMouseMove)
raf = requestAnimationFrame(update)
window.removeEventListener('beforeunload', handleMouseMove)
</script>
