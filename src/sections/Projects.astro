---
import type { Project } from '@/types/Project'

import { Image } from 'astro:assets'
import Content from '@/components/Content.astro'
import SectionHeader from '@/components/SectionHeader.astro'
import Badge from '@/components/Badge.astro'
import { valueOfDate } from '@/utils/value-of-date'

const projects = (await Astro.glob<Project>('@/pages/projects/*.md'))
.sort((a: any, b: any) => {
  return valueOfDate(b.frontmatter.createdAt) - valueOfDate(a.frontmatter.createdAt)
})
.filter(project => project.frontmatter.public)
.slice(0, 4)
---

<div class="projects">
  <Content>
    <SectionHeader title="Proyectos" />

    <section>
      {projects.map(({ frontmatter, url }, index) => (
        <a href={url} class="card__wrapper">
          <div class="card">
            <div class="card__image-wrapper">
              <Image
                src={frontmatter.thumb ?? ''}
                alt="imagen del proyecto"
                height="520"
                width="400"
                class="card__image"
              />
              <div class="card__stack">
                <Badge class="badge--primary">
                  React
                </Badge>
                <Badge class="badge--primary">
                  TypeScript
                </Badge>
              </div>
            </div>
            <div class="card__content-wrapper">
              <article class="card__content">
                <h4 class="card__title">
                  {frontmatter.title}
                </h4>
                <p class="card__description">
                  {frontmatter.description}
                </p>
              </article>
              <span class="card__id">
                {index + 1}
              </span>
            </div>
          </div>
        </a>
      ))}
      <div class="end-anim"></div>
    </section>
  </Content>
</div>

<style>
.projects {
  padding-top: 2rem;
}

.card {
  background-color: var(--black);
  border-bottom: 1px solid hsla(var(--zinc-700-hsl), 0.5);
  padding: 2rem 0;
  position: relative;
  display: flex;
  flex-direction: column;
  row-gap: 1rem;
  overflow: hidden;
}

.card:last-child {
  border-bottom-color: transparent;
}

.card__id {
  display: none;
}

.card__image-wrapper {
  position: relative;
  height: 12rem;
  overflow: hidden;
  border-radius: var(--rounded-lg);
  transition: width 600ms ease, height 300ms ease, transform 300ms ease, position 300ms ease;
}

.card__image-wrapper .card__image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
  border: 1px solid hsla(var(--primary-600-hsl), 0.15);
  transition: transform 300ms;
}

.card__wrapper:hover .card__image {
  position: relative;
  transform: scale(1.1);
}

.card__image-wrapper .card__stack {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  padding: 1rem 0.875rem;
  display: flex;
  flex-wrap: wrap;
  gap: 0.25rem;
}

.card__content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  row-gap: 0.25rem;
}

.card__content .card__title {
  font-size: 18px;
  font-weight: 500;
}

.card__content .card__description {
  text-align: center;
}

@media screen and (min-width: 640px) {
  .card .card__image-wrapper {
    height: 20rem;
  }
}

@media screen and (min-width: 768px) {
  .card {
    flex-direction: row;
    align-items: center;
    justify-content: start;
    column-gap: 2rem;
  }

  .card .card__image-wrapper {
    width: 24rem;
    min-width: 24rem;
    height: 12rem;
  }

  .card__content {
    height: 100%;
    align-items: start;
    justify-content: center;
  }

  .card__content .card__title {
    font-size: 1.25rem;
  }

  .card__content .card__description {
    text-align: unset;
  }
}

@media screen and (min-width: 1024px) {
  .card {
    padding: 4rem 0;
    justify-content: space-between;
  }

  .card__wrapper .card__image-wrapper {
    width: 28rem;
    height: 16rem;
  }

  .card .card__content-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-direction: row;
    min-width: 24rem;
    width: 100%;
    column-gap: 1rem;
  }

  .card__content .card__title {
    font-size: 1.5rem;
  }

  .card .card__id {
    display: inline-block;
    font-family: var(--font-bebas-neue);
    font-size: 12vh;
    transition: font-size 300ms ease;
  }
}

@media screen and (min-width: 1280px) {
  .card {
    height: 24rem;
  }

  .card .card__image-wrapper {
    transform-origin: center center;
  }

  .card:hover .card__image-wrapper {
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    transform-origin: center center;
    height: 24rem;
    width: 48rem;
  }

  .card:hover {
    justify-content: end;
  }

  .card .card__wrapper {
    column-gap: 4rem;
  }

  .card .card__content-wrapper {
    max-width: 24rem;
    column-gap: 4rem;
  }

  .card .card__id {
    font-size: 24vh;
  }
}
</style>

<script>
import gsap from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'

gsap.registerPlugin(ScrollTrigger)

const cardsWrapper = gsap.utils.toArray('.card__wrapper')
const cardsEl = gsap.utils.toArray('.card')

cardsWrapper.forEach((el, index) => {
  const card = cardsEl[index] as HTMLElement
  const myEl = el as HTMLElement

  if (!myEl) return
  if (!card) return

  let scale = 1
  let rotate = 0

  if (index !== cardsEl.length - 1) {
    scale = 0.9 + 0.025 * index
    rotate = -10
  }

  gsap.to(card, {
    scale,
    rotationX: rotate,
    transformOrigin: 'top center',
    ease: 'none',
    scrollTrigger: {
      trigger: myEl,
      start: 'top' + (70 + 40 * index),
      end: () => {
        if(window.innerWidth < 768) {
          return 'bottom +=445px'
        } else {
          return 'bottom +=256px'
        }
      },
      endTrigger: '.end-anim',
      pin: myEl,
      pinSpacing: false,
      scrub: true
    }
  })
})
</script>
