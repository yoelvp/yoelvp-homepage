---
import SectionHeader from '@/components/SectionHeader.astro'
import Badge from '@/components/Badge.astro'
import IconLink from '@/icons/link.astro'
import { experiences } from '@/constants/experiences'
---

<div>
  <SectionHeader title="Experiencia" />

  <section class="cards__container">
    {experiences.map((experience) => (
      <article class="experience">
        <span class="experience__date white-to-primary">
          {experience.startDate} - {experience.endDate}
        </span>

        <article class="experience__content">
          <span class="experience__position">
            <strong class="white-to-primary">
              {experience.position}
            </strong>
            <span class="white-to-primary">&bull;</span>
            <a href={experience.companyWebsite} class="primary-to-white">
              {experience.companyName}
            </a>
          </span>
          {experience.description && (
            <p class="experience__description white-to-primary" set:html={experience.description} />
          )}

          <ul class="experience__details">
            {experience.details.map(detail => (
              <li set:html={detail} class="white-to-primary" />
            ))}
          </ul>

          {experience.projects && (
            <ul class="experience__projects">
              {experience.projects && experience.projects?.map(project => (
                <li class="project__item">
                  <a
                    href={project.link}
                    class="white-to-primary"
                    target="_blank"
                    rel="noreferrer noopener"
                    referrerpolicy="no-referrer"
                  >
                    <IconLink />
                    {project.name}
                  </a>
                </li>
              ))}
            </ul>
          )}

          <ul class="experience__stack">
            {experience.stack.map((stackName) => (
              <Badge class="stack__item badge--primary badge--outline primary-to-white">
                {stackName}
              </Badge>
            ))}
          </ul>
        </article>
      </article>
    ))}
  </section>
</div>

<style>
.cards__container {
  display: flex;
  flex-direction: column;
  width: 100%;
  row-gap: 2rem;
}

.experience {
  display: grid;
  grid-template-columns: 1fr;
  align-items: start;
  row-gap: 1rem;
  padding: 1rem;
  border-radius: var(--rounded);
  border: 0.5px solid transparent;
  transition: background-color 300ms, border-color 300ms;
  opacity: 0.8;
}

.experience.experience--active {
  opacity: 1;
}

.experience.experience--active {
  border-color: hsla(var(--gray-800-hsl), 0.5);
  backdrop-filter: blur(2px);
}

.experience__date {
  text-transform: uppercase;
  font-weight: 400;
  font-size: var(--text-sm);
  color: var(--zinc-500);
}

.experience__content {
  display: flex;
  flex-direction: column;
  justify-content: start;
  align-items: start;
  row-gap: 1rem;
  color: var(--zinc-300);
}

.experience__position {
  font-size: 18px;
  display: flex;
  flex-direction: column;
  justify-content: start;
  align-items: start;
  gap: 4px;
  font-weight: 500;
}

.experience__position span {
  display: none;
}

.experience__position a {
  font-weight: 500;
  text-decoration: underline;
  text-decoration-color: var(--primary);
  color: var(--white);
  font-size: var(--text-base);
  transition: color 300ms;
}

.experience__position a:hover {
  text-decoration-style: wavy;
  color: var(--primary-600);
}

.experience__description {
  margin-bottom: 0.5rem;
}

.experience__details {
  margin-bottom: 1rem;
}

.experience__details li {
  list-style: disc;
  list-style-position: inside;
}

.experience__projects {
  margin-bottom: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: start;
  align-items: center;
  gap: 1rem;
}

.experience__projects .project__item a {
  display: flex;
  justify-content: start;
  align-items: center;
  gap: 4px;
  color: var(--white);
  transition: color 300ms;
}

.experience__projects .project__item a:hover {
  color: var(--primary);
}

.experience__stack {
  display: flex;
  flex-wrap: wrap;
  justify-content: start;
  align-items: center;
  gap: 0.5rem;
}

@media screen and (min-width: 640px) {
  .experience__position {
    flex-direction: row;
  }

  .experience__position span {
    display: inline;
  }
}

@media screen and (min-width: 1024px) {
  .experience {
    grid-template-columns: repeat(8, 1fr);
    column-gap: 1rem;
  }

  .experience .experience__date {
    white-space: nowrap;
    grid-column: span 1 / span 1;
  }

  .experience .experience__content {
    grid-column: span 7 / span 7;
  }
}
</style>

<script>
import { $$ } from '@/lib/dom-selector'

const $cards = $$('.experience')

const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    const card = entry.target

    if (entry.isIntersecting) {
      card.classList.add('experience--active', 'experience--hover', 'experience__position--active')
    } else {
      card.classList.remove('experience--active', 'experience--hover', 'experience__position--active')
    }
  })
}, {
    root: null,
    rootMargin: '-50%'
  })

$cards?.forEach(card => observer.observe(card))
</script>
